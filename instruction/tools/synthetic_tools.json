[
    {
        "type": "function",
        "function": {
            "name": "midjourney_create_image",
            "description": "Generate high-quality images using Midjourney's advanced AI model. Creates 4 image variations based on the provided prompt.",
            "parameters": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string",
                        "description": "Detailed description of the image to generate"
                    },
                    "style_version": {
                        "type": "string",
                        "description": "Midjourney model version to use for generation",
                        "enum": [
                            "V5",
                            "V6",
                            "niji"
                        ],
                        "default": "V6"
                    },
                    "aspect_ratio": {
                        "type": "string",
                        "description": "Output image aspect ratio",
                        "default": "1:1"
                    },
                    "quality": {
                        "type": "number",
                        "description": "Quality level affecting generation time and detail (0.25-2.0)",
                        "minimum": 0.25,
                        "maximum": 2.0,
                        "default": 1.0
                    },
                    "style_params": {
                        "type": "object",
                        "description": "Optional parameters for fine-tuning the style"
                    }
                },
                "required": [
                    "prompt"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning"
    },
    {
        "type": "function",
        "function": {
            "name": "stable_diffusion_generate",
            "description": "Generate high-quality images using Stable Diffusion with advanced customization options and fine-grained control.",
            "parameters": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string",
                        "description": "Text description of the desired image"
                    },
                    "model": {
                        "type": "string",
                        "description": "Stable Diffusion model version to use",
                        "default": "sd_xl_base_1.0"
                    },
                    "negative_prompt": {
                        "type": "string",
                        "description": "Elements to exclude from the generated image"
                    },
                    "steps": {
                        "type": "integer",
                        "description": "Number of denoising steps for generation",
                        "minimum": 1,
                        "maximum": 150,
                        "default": 50
                    },
                    "cfg_scale": {
                        "type": "number",
                        "description": "Classifier Free Guidance scale - controls how closely the image follows the prompt",
                        "minimum": 1,
                        "maximum": 30,
                        "default": 7.5
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Random seed for reproducible generations"
                    },
                    "width": {
                        "type": "integer",
                        "description": "Output image width",
                        "default": 1024
                    },
                    "height": {
                        "type": "integer",
                        "description": "Output image height",
                        "default": 1024
                    },
                    "sampler": {
                        "type": "string",
                        "description": "Sampling algorithm for generation",
                        "default": "DPM++ 2M Karras"
                    }
                },
                "required": [
                    "prompt"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning"
    },
    {
        "type": "function",
        "function": {
            "name": "runway_generate_video",
            "description": "Create AI-generated videos from text descriptions, images, or existing videos using Runway's advanced video generation technology.",
            "parameters": {
                "type": "object",
                "properties": {
                    "prompt": {
                        "type": "string",
                        "description": "Text description for video generation"
                    },
                    "mode": {
                        "type": "string",
                        "description": "Generation mode: create from text, animate an image, or transform a video",
                        "enum": [
                            "text_to_video",
                            "image_to_video",
                            "video_to_video"
                        ],
                        "default": "text_to_video"
                    },
                    "duration": {
                        "type": "number",
                        "description": "Video duration in seconds",
                        "minimum": 1,
                        "maximum": 18,
                        "default": 4.0
                    },
                    "fps": {
                        "type": "integer",
                        "description": "Frames per second for the output video",
                        "enum": [
                            24,
                            30
                        ],
                        "default": 24
                    },
                    "style_preset": {
                        "type": "string",
                        "description": "Visual style preset for the video",
                        "default": "cinematic"
                    },
                    "num_frames": {
                        "type": "integer",
                        "description": "Total number of frames in the output video"
                    },
                    "motion_bucket_id": {
                        "type": "integer",
                        "description": "Controls the intensity of motion in the generated video",
                        "minimum": 1,
                        "maximum": 255,
                        "default": 127
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Random seed for reproducible video generation"
                    }
                },
                "required": [
                    "prompt"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning"
    },
    {
        "type": "function",
        "function": {
            "name": "elevenlabs_text_to_speech",
            "description": "Convert text to natural-sounding speech using ElevenLabs' advanced text-to-speech technology with customizable voice settings.",
            "parameters": {
                "type": "object",
                "properties": {
                    "text": {
                        "type": "string",
                        "description": "Text content to convert to speech",
                        "maxLength": 2500
                    },
                    "voice_id": {
                        "type": "string",
                        "description": "Identifier for the selected voice",
                        "default": "josh"
                    },
                    "model": {
                        "type": "string",
                        "description": "Text-to-speech model version",
                        "default": "eleven_multilingual_v2"
                    },
                    "stability": {
                        "type": "number",
                        "description": "Voice stability control (0-1)",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.5
                    },
                    "similarity_boost": {
                        "type": "number",
                        "description": "Voice similarity enhancement factor (0-1)",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.75
                    },
                    "style": {
                        "type": "number",
                        "description": "Speaking style intensity control (0-1)",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.0
                    },
                    "use_speaker_boost": {
                        "type": "boolean",
                        "description": "Enable enhanced prosody and speaking characteristics",
                        "default": true
                    }
                },
                "required": [
                    "text"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning"
    },
    {
        "type": "function",
        "function": {
            "name": "dalle_edit_image",
            "description": "Edit images using DALL-E AI with text prompts and optional masks",
            "parameters": {
                "type": "object",
                "properties": {
                    "image_url": {
                        "type": "string",
                        "description": "URL of the source image to edit",
                        "format": "uri"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "Detailed description of the desired edits",
                        "examples": [
                            "Change the background to a sunset beach",
                            "Make the car red instead of blue"
                        ]
                    },
                    "mask_url": {
                        "type": "string",
                        "description": "Optional URL of mask image (transparent areas indicate where to edit)",
                        "format": "uri"
                    },
                    "size": {
                        "type": "string",
                        "description": "Dimensions of the output image",
                        "enum": [
                            "1024x1024",
                            "1024x1792",
                            "1792x1024"
                        ],
                        "default": "1024x1024"
                    },
                    "quality": {
                        "type": "string",
                        "description": "Quality level of the generated image",
                        "enum": [
                            "standard",
                            "hd"
                        ],
                        "default": "standard"
                    },
                    "model": {
                        "type": "string",
                        "description": "DALL-E model version to use",
                        "enum": [
                            "dall-e-2",
                            "dall-e-3"
                        ],
                        "default": "dall-e-3"
                    },
                    "n": {
                        "type": "integer",
                        "description": "Number of images to generate",
                        "minimum": 1,
                        "maximum": 4,
                        "default": 1
                    }
                },
                "required": [
                    "image_url",
                    "prompt"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning",
        "vendor": "OpenAI",
        "rate_limits": {
            "requests_per_minute": 50,
            "daily_images": 1000
        },
        "error_codes": {
            "DE_MISSING_INPUTS": "Required inputs (image_url or prompt) are missing",
            "DE_INVALID_N": "Invalid number of images requested",
            "DE_INVALID_SIZE": "Invalid image size specified",
            "DE_PROCESSING_ERROR": "Error during image processing",
            "DE_INAPPROPRIATE": "Inappropriate content detected in prompt or image"
        }
    },
    {
        "type": "function",
        "function": {
            "name": "stability_edit_image",
            "description": "Edit images using Stability AI's advanced models with multiple editing modes including img2img and ControlNet",
            "parameters": {
                "type": "object",
                "properties": {
                    "image_url": {
                        "type": "string",
                        "description": "URL of the source image to edit",
                        "format": "uri"
                    },
                    "prompt": {
                        "type": "string",
                        "description": "Detailed description of the desired changes",
                        "examples": [
                            "Convert the image style to oil painting",
                            "Add snow to the scene while keeping the main subject"
                        ]
                    },
                    "edit_mode": {
                        "type": "string",
                        "description": "Type of edit operation to perform",
                        "enum": [
                            "img2img",
                            "inpaint",
                            "controlnet"
                        ],
                        "default": "img2img"
                    },
                    "control_mode": {
                        "type": "string",
                        "description": "ControlNet conditioning mode (required if edit_mode is controlnet)",
                        "enum": [
                            "canny",
                            "depth",
                            "pose",
                            "seg",
                            "hed",
                            "scribble",
                            "normal"
                        ],
                        "default": null
                    },
                    "strength": {
                        "type": "number",
                        "description": "How much to transform the image (0 = minimal, 1 = maximum)",
                        "minimum": 0,
                        "maximum": 1,
                        "default": 0.75
                    },
                    "guidance_scale": {
                        "type": "number",
                        "description": "How strictly to follow the prompt",
                        "minimum": 1,
                        "maximum": 20,
                        "default": 7.5
                    },
                    "seed": {
                        "type": "integer",
                        "description": "Random seed for reproducible results",
                        "default": null
                    },
                    "steps": {
                        "type": "integer",
                        "description": "Number of diffusion steps",
                        "minimum": 10,
                        "maximum": 150,
                        "default": 30
                    },
                    "control_guidance": {
                        "type": "number",
                        "description": "ControlNet guidance strength",
                        "minimum": 0,
                        "maximum": 2,
                        "default": 1.0
                    }
                },
                "required": [
                    "image_url",
                    "prompt"
                ]
            }
        },
        "category": "Artificial_Intelligence_Machine_Learning",
        "vendor": "Stability AI",
        "rate_limits": {
            "requests_per_minute": 50,
            "concurrent_jobs": 3
        },
        "error_codes": {
            "ST_MISSING_INPUTS": "Required inputs are missing",
            "ST_INVALID_MODE": "Invalid edit mode specified",
            "ST_MISSING_CONTROL": "ControlNet mode required for controlnet edit_mode",
            "ST_INVALID_STRENGTH": "Invalid strength value",
            "ST_PROCESSING_ERROR": "Error during image processing",
            "ST_RATE_LIMIT": "Rate limit exceeded"
        }
    },
    {
        "type": "function",
        "function": {
            "name": "send_gmail",
            "description": "Sends an email through Gmail platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "string",
                        "description": "Sender's Gmail address (must end with @gmail.com)"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipient email addresses"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject line"
                    },
                    "body": {
                        "type": "string",
                        "description": "Email body content"
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of CC recipient email addresses"
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of BCC recipient email addresses"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "MIME type of the file"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                }
                            }
                        },
                        "description": "List of attachments (max 25 files, total 25MB)",
                        "maxItems": 25
                    },
                    "is_html": {
                        "type": "boolean",
                        "description": "Whether the body content is HTML formatted",
                        "default": false
                    },
                    "priority": {
                        "type": "string",
                        "description": "Email priority level",
                        "enum": [
                            "low",
                            "normal",
                            "high"
                        ],
                        "default": "normal"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Save as draft instead of sending",
                        "default": false
                    }
                },
                "required": [
                    "sender",
                    "to",
                    "subject",
                    "body"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_outlook",
            "description": "Sends an email through Outlook platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "string",
                        "description": "Sender's Outlook address (must end with @outlook.com or @hotmail.com)"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipient email addresses"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject line"
                    },
                    "body": {
                        "type": "string",
                        "description": "Email body content"
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of CC recipient email addresses"
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of BCC recipient email addresses"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Attachment file name"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "MIME type of the file"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                }
                            }
                        },
                        "description": "List of attachments (total 20MB limit)"
                    },
                    "is_html": {
                        "type": "boolean",
                        "description": "Whether the body content is HTML formatted",
                        "default": false
                    },
                    "importance": {
                        "type": "string",
                        "description": "Email importance level",
                        "enum": [
                            "low",
                            "normal",
                            "high"
                        ],
                        "default": "normal"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Save as draft instead of sending",
                        "default": false
                    },
                    "category": {
                        "type": "string",
                        "description": "Email category or flag",
                        "enum": [
                            "Personal",
                            "Work",
                            "Important",
                            "Todo",
                            "Later"
                        ],
                        "default": null
                    }
                },
                "required": [
                    "sender",
                    "to",
                    "subject",
                    "body"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_yahoo_mail",
            "description": "Sends an email through Yahoo Mail platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "string",
                        "description": "Sender's Yahoo address (must end with @yahoo.com)"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipient email addresses"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject line"
                    },
                    "body": {
                        "type": "string",
                        "description": "Email body content"
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of CC recipient email addresses"
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of BCC recipient email addresses"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Attachment file name"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "MIME type of the file"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                }
                            }
                        },
                        "description": "List of attachments (total 25MB limit)"
                    },
                    "is_html": {
                        "type": "boolean",
                        "description": "Whether the body content is HTML formatted",
                        "default": false
                    },
                    "priority": {
                        "type": "string",
                        "description": "Email priority level",
                        "enum": [
                            "low",
                            "normal",
                            "high"
                        ],
                        "default": "normal"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Save as draft instead of sending",
                        "default": false
                    }
                },
                "required": [
                    "sender",
                    "to",
                    "subject",
                    "body"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_163_mail",
            "description": "Sends an email through 163 Mail platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "sender": {
                        "type": "string",
                        "description": "Sender's 163 address (must end with @163.com)"
                    },
                    "to": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of recipient email addresses"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Email subject line"
                    },
                    "body": {
                        "type": "string",
                        "description": "Email body content"
                    },
                    "cc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of CC recipient email addresses"
                    },
                    "bcc": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of BCC recipient email addresses"
                    },
                    "attachments": {
                        "type": "array",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Attachment file name"
                                },
                                "type": {
                                    "type": "string",
                                    "description": "MIME type of the file"
                                },
                                "size": {
                                    "type": "integer",
                                    "description": "File size in bytes"
                                }
                            }
                        },
                        "description": "List of attachments (total 50MB limit)"
                    },
                    "is_html": {
                        "type": "boolean",
                        "description": "Whether the body content is HTML formatted",
                        "default": false
                    },
                    "priority": {
                        "type": "string",
                        "description": "Email priority level",
                        "enum": [
                            "low",
                            "normal",
                            "high"
                        ],
                        "default": "normal"
                    },
                    "draft": {
                        "type": "boolean",
                        "description": "Save as draft instead of sending",
                        "default": false
                    }
                },
                "required": [
                    "sender",
                    "to",
                    "subject",
                    "body"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_twilio_sms",
            "description": "Send an SMS message using Twilio. Supports text messages with optional media attachments.",
            "parameters": {
                "type": "object",
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The recipient's phone number in E.164 format (e.g., '+1234567890')"
                    },
                    "message": {
                        "type": "string",
                        "description": "The text content of the message to send"
                    },
                    "from_number": {
                        "type": "string",
                        "description": "The sender's phone number in E.164 format. If not provided, a default Twilio number will be used",
                        "optional": true
                    },
                    "media_url": {
                        "type": "string",
                        "description": "URL of the media to attach to the message (images, videos, etc.)",
                        "optional": true
                    }
                },
                "required": [
                    "to",
                    "message"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_messagebird_sms",
            "description": "Send an SMS message using MessageBird. Supports custom originator ID and message reference.",
            "parameters": {
                "type": "object",
                "properties": {
                    "to": {
                        "type": "string",
                        "description": "The recipient's phone number in international format (e.g., '+1234567890')"
                    },
                    "message": {
                        "type": "string",
                        "description": "The text content of the message to send"
                    },
                    "originator": {
                        "type": "string",
                        "description": "Sender ID (phone number or alphanumeric, max 11 chars). If not provided, 'MessageBird' will be used",
                        "optional": true
                    },
                    "reference": {
                        "type": "string",
                        "description": "Custom reference for the message for tracking purposes",
                        "optional": true
                    }
                },
                "required": [
                    "to",
                    "message"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "send_telegram_message",
            "description": "Send a message using Telegram Bot API. Supports text formatting and silent messages.",
            "parameters": {
                "type": "object",
                "properties": {
                    "chat_id": {
                        "type": [
                            "integer",
                            "string"
                        ],
                        "description": "Unique identifier for the target chat or username of the target channel"
                    },
                    "text": {
                        "type": "string",
                        "description": "Text of the message to be sent"
                    },
                    "parse_mode": {
                        "type": "string",
                        "enum": [
                            "HTML",
                            "Markdown",
                            "MarkdownV2"
                        ],
                        "description": "Mode for parsing entities in the message text",
                        "optional": true
                    },
                    "disable_notification": {
                        "type": "boolean",
                        "description": "Sends the message silently. Users will receive a notification with no sound",
                        "optional": true
                    }
                },
                "required": [
                    "chat_id",
                    "text"
                ]
            }
        },
        "category": "Communication"
    },
    {
        "type": "function",
        "function": {
            "name": "execute_dex_swap",
            "description": "Execute a token swap on a decentralized exchange using smart contracts",
            "parameters": {
                "type": "object",
                "properties": {
                    "from_token": {
                        "type": "string",
                        "description": "Contract address of the token to swap from"
                    },
                    "to_token": {
                        "type": "string",
                        "description": "Contract address of the token to swap to"
                    },
                    "amount": {
                        "type": "string",
                        "description": "Amount of from_token to swap (in wei format)"
                    },
                    "slippage": {
                        "type": "number",
                        "description": "Maximum acceptable slippage percentage",
                        "optional": true
                    },
                    "wallet_address": {
                        "type": "string",
                        "description": "Ethereum wallet address executing the swap"
                    }
                },
                "required": [
                    "from_token",
                    "to_token",
                    "amount",
                    "wallet_address"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "create_wallet",
            "description": "Create a new cryptocurrency wallet with optional encryption and backup features",
            "parameters": {
                "type": "object",
                "properties": {
                    "wallet_type": {
                        "type": "string",
                        "enum": [
                            "hot",
                            "cold",
                            "multi_sig"
                        ],
                        "description": "Type of wallet to create"
                    },
                    "encryption_level": {
                        "type": "string",
                        "enum": [
                            "standard",
                            "high",
                            "very_high"
                        ],
                        "description": "Level of encryption for the wallet",
                        "optional": true
                    },
                    "backup_enabled": {
                        "type": "boolean",
                        "description": "Enable automatic backup of wallet",
                        "optional": true
                    },
                    "required_signatures": {
                        "type": "integer",
                        "description": "Number of signatures required for multi-sig wallet",
                        "optional": true
                    }
                },
                "required": [
                    "wallet_type"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "deploy_smart_contract",
            "description": "Deploy a smart contract to the blockchain network",
            "parameters": {
                "type": "object",
                "properties": {
                    "contract_bytecode": {
                        "type": "string",
                        "description": "Compiled bytecode of the smart contract"
                    },
                    "constructor_args": {
                        "type": "array",
                        "description": "Arguments for the contract constructor",
                        "items": {
                            "type": "string"
                        },
                        "optional": true
                    },
                    "network": {
                        "type": "string",
                        "description": "Blockchain network to deploy to"
                    },
                    "gas_limit": {
                        "type": "string",
                        "description": "Maximum gas allowed for deployment",
                        "optional": true
                    }
                },
                "required": [
                    "contract_bytecode",
                    "network"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "execute_cross_chain_transfer",
            "description": "Execute a cross-chain transfer using blockchain bridges",
            "parameters": {
                "type": "object",
                "properties": {
                    "from_chain": {
                        "type": "string",
                        "description": "Source blockchain network"
                    },
                    "to_chain": {
                        "type": "string",
                        "description": "Destination blockchain network"
                    },
                    "token_address": {
                        "type": "string",
                        "description": "Address of token to transfer"
                    },
                    "amount": {
                        "type": "string",
                        "description": "Amount to transfer (in wei format)"
                    },
                    "recipient": {
                        "type": "string",
                        "description": "Recipient address on destination chain"
                    }
                },
                "required": [
                    "from_chain",
                    "to_chain",
                    "token_address",
                    "amount",
                    "recipient"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "query_blockchain_data",
            "description": "Query blockchain data including transactions, blocks, and addresses",
            "parameters": {
                "type": "object",
                "properties": {
                    "network": {
                        "type": "string",
                        "description": "Blockchain network to query"
                    },
                    "query_type": {
                        "type": "string",
                        "enum": [
                            "transaction",
                            "block",
                            "address",
                            "contract"
                        ],
                        "description": "Type of data to query"
                    },
                    "identifier": {
                        "type": "string",
                        "description": "Hash, address, or block number to query"
                    },
                    "include_details": {
                        "type": "boolean",
                        "description": "Include detailed information in response",
                        "optional": true
                    }
                },
                "required": [
                    "network",
                    "query_type",
                    "identifier"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "mix_cryptocurrency",
            "description": "Mix cryptocurrency through multiple addresses for enhanced privacy",
            "parameters": {
                "type": "object",
                "properties": {
                    "input_addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of input addresses"
                    },
                    "output_addresses": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of output addresses"
                    },
                    "delay_range": {
                        "type": "object",
                        "properties": {
                            "min": {
                                "type": "integer",
                                "description": "Minimum delay in blocks"
                            },
                            "max": {
                                "type": "integer",
                                "description": "Maximum delay in blocks"
                            }
                        },
                        "optional": true
                    }
                },
                "required": [
                    "input_addresses",
                    "output_addresses"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "bitcoin_transaction",
            "description": "Execute Bitcoin transaction with UTXO management and custom fee settings",
            "parameters": {
                "type": "object",
                "properties": {
                    "from_address": {
                        "type": "string",
                        "description": "Bitcoin sender address"
                    },
                    "to_address": {
                        "type": "string",
                        "description": "Bitcoin recipient address"
                    },
                    "amount_btc": {
                        "type": "string",
                        "description": "Amount in BTC to send"
                    },
                    "fee_rate": {
                        "type": "string",
                        "description": "Fee rate in satoshis per byte",
                        "optional": true
                    },
                    "utxo_selection": {
                        "type": "string",
                        "enum": [
                            "economic",
                            "privacy",
                            "age_based"
                        ],
                        "description": "UTXO selection strategy",
                        "optional": true
                    }
                },
                "required": [
                    "from_address",
                    "to_address",
                    "amount_btc"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "create_bitcoin_payment",
            "description": "Generate Bitcoin payment request URI for receiving payments",
            "parameters": {
                "type": "object",
                "properties": {
                    "to_address": {
                        "type": "string",
                        "description": "Bitcoin recipient address for payment"
                    },
                    "amount_btc": {
                        "type": "string",
                        "description": "Optional amount in BTC to request",
                        "optional": true
                    },
                    "label": {
                        "type": "string",
                        "description": "Optional label for the payment request (e.g., 'Donation', 'Invoice #123')",
                        "optional": true
                    },
                    "message": {
                        "type": "string",
                        "description": "Optional message or description for the payment request",
                        "optional": true
                    }
                },
                "required": ["to_address"]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "ethereum_contract_interaction",
            "description": "Interact with Ethereum smart contracts including ERC20/ERC721 tokens",
            "parameters": {
                "type": "object",
                "properties": {
                    "contract_address": {
                        "type": "string",
                        "description": "Smart contract address"
                    },
                    "function_name": {
                        "type": "string",
                        "description": "Smart contract function to call"
                    },
                    "function_args": {
                        "type": "array",
                        "description": "Arguments for the contract function",
                        "items": {
                            "type": "string"
                        }
                    },
                    "value_eth": {
                        "type": "string",
                        "description": "Amount of ETH to send with transaction",
                        "optional": true
                    },
                    "gas_priority": {
                        "type": "string",
                        "enum": [
                            "low",
                            "medium",
                            "high"
                        ],
                        "description": "Gas price strategy",
                        "optional": true
                    }
                },
                "required": [
                    "contract_address",
                    "function_name",
                    "function_args"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "binance_smart_chain_swap",
            "description": "Execute token swaps on Binance Smart Chain with PancakeSwap integration",
            "parameters": {
                "type": "object",
                "properties": {
                    "token_in": {
                        "type": "string",
                        "description": "Input token contract address"
                    },
                    "token_out": {
                        "type": "string",
                        "description": "Output token contract address"
                    },
                    "amount": {
                        "type": "string",
                        "description": "Amount of input token"
                    },
                    "slippage": {
                        "type": "number",
                        "description": "Maximum acceptable slippage percentage",
                        "optional": true
                    },
                    "route_preference": {
                        "type": "string",
                        "enum": [
                            "lowest_gas",
                            "highest_return",
                            "balanced"
                        ],
                        "description": "Routing strategy preference",
                        "optional": true
                    }
                },
                "required": [
                    "token_in",
                    "token_out",
                    "amount"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "solana_program_call",
            "description": "Interact with Solana programs and SPL tokens",
            "parameters": {
                "type": "object",
                "properties": {
                    "program_id": {
                        "type": "string",
                        "description": "Solana program ID to interact with"
                    },
                    "instruction": {
                        "type": "string",
                        "description": "Program instruction to execute"
                    },
                    "accounts": {
                        "type": "array",
                        "description": "List of account public keys involved",
                        "items": {
                            "type": "string"
                        }
                    },
                    "lamports": {
                        "type": "string",
                        "description": "Amount of SOL in lamports",
                        "optional": true
                    }
                },
                "required": [
                    "program_id",
                    "instruction",
                    "accounts"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "monero_private_transfer",
            "description": "Execute private Monero transaction with ring signatures and stealth addresses",
            "parameters": {
                "type": "object",
                "properties": {
                    "destination": {
                        "type": "string",
                        "description": "Monero destination address"
                    },
                    "amount_xmr": {
                        "type": "string",
                        "description": "Amount in XMR to send"
                    },
                    "ring_size": {
                        "type": "integer",
                        "description": "Number of signers in the ring signature",
                        "optional": true
                    },
                    "priority": {
                        "type": "string",
                        "enum": [
                            "slow",
                            "normal",
                            "fast"
                        ],
                        "description": "Transaction priority level",
                        "optional": true
                    }
                },
                "required": [
                    "destination",
                    "amount_xmr"
                ]
            }
        },
        "category": "Cryptography"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_amazon",
            "description": "Place an order on Amazon with support for Prime shipping and gift options",
            "parameters": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "Product ID of the item to order"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "Number of items to order"
                    },
                    "shipping_address": {
                        "type": "string",
                        "description": "Delivery address for the order"
                    },
                    "shipping_method": {
                        "type": "string",
                        "description": "Shipping method to use",
                        "enum": [
                            "standard",
                            "expedited",
                            "prime"
                        ],
                        "default": "standard"
                    },
                    "gift": {
                        "type": "boolean",
                        "description": "Whether this is a gift order",
                        "default": false
                    },
                    "gift_message": {
                        "type": "string",
                        "description": "Optional gift message for gift orders"
                    },
                    "prime": {
                        "type": "boolean",
                        "description": "Whether the user has Prime membership",
                        "default": false
                    }
                },
                "required": [
                    "item_id",
                    "quantity",
                    "shipping_address"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_temu",
            "description": "Place an order on Temu with options for product variants and shipping insurance",
            "parameters": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "Product ID of the item to order"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "Number of items to order"
                    },
                    "shipping_address": {
                        "type": "string",
                        "description": "Delivery address for the order"
                    },
                    "color": {
                        "type": "string",
                        "description": "Color variant of the product"
                    },
                    "size": {
                        "type": "string",
                        "description": "Size variant of the product"
                    },
                    "insurance": {
                        "type": "boolean",
                        "description": "Whether to add shipping insurance",
                        "default": false
                    }
                },
                "required": [
                    "item_id",
                    "quantity",
                    "shipping_address"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_ebay",
            "description": "Place an order on eBay with support for Best Offer and multiple payment methods",
            "parameters": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "Product ID of the item to order"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "Number of items to order"
                    },
                    "shipping_address": {
                        "type": "string",
                        "description": "Delivery address for the order"
                    },
                    "offer_price": {
                        "type": "number",
                        "description": "Price offered for negotiation (for items with Best Offer option)"
                    },
                    "shipping_option": {
                        "type": "string",
                        "description": "Shipping option to use",
                        "enum": [
                            "standard",
                            "expedited"
                        ],
                        "default": "standard"
                    },
                    "payment_method": {
                        "type": "string",
                        "description": "Payment method to use",
                        "enum": [
                            "paypal",
                            "card"
                        ],
                        "default": "paypal"
                    }
                },
                "required": [
                    "item_id",
                    "quantity",
                    "shipping_address"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_taobao",
            "description": "Place an order on Taobao with support for points redemption and seller communication",
            "parameters": {
                "type": "object",
                "properties": {
                    "item_id": {
                        "type": "string",
                        "description": "Product ID of the item to order"
                    },
                    "quantity": {
                        "type": "integer",
                        "description": "Number of items to order"
                    },
                    "shipping_address": {
                        "type": "string",
                        "description": "Delivery address for the order"
                    },
                    "color_size": {
                        "type": "string",
                        "description": "Combined color and size selection (e.g., 'Red,XL')"
                    },
                    "delivery_option": {
                        "type": "string",
                        "description": "Delivery option to use",
                        "enum": [
                            "standard",
                            "express"
                        ],
                        "default": "standard"
                    },
                    "message_to_seller": {
                        "type": "string",
                        "description": "Optional message to the seller"
                    },
                    "use_points": {
                        "type": "boolean",
                        "description": "Whether to use Taobao points for discount",
                        "default": false
                    }
                },
                "required": [
                    "item_id",
                    "quantity",
                    "shipping_address"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "search_products_amazon",
            "description": "Search for products on Amazon platform, including various categories like electronics, books, clothing, etc.",
            "parameters": {
                "type": "object",
                "properties": {
                    "keyword": {
                        "type": "string",
                        "description": "Search keyword to find products"
                    },
                    "category": {
                        "type": "string",
                        "description": "Product category to filter results"
                    },
                    "prime_only": {
                        "type": "boolean",
                        "description": "Show only Prime-eligible items",
                        "default": false
                    },
                    "min_rating": {
                        "type": "number",
                        "description": "Minimum rating score (1-5)",
                        "minimum": 1,
                        "maximum": 5
                    },
                    "price_range": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "description": "Array of [min_price, max_price] for filtering"
                    },
                    "sort_by": {
                        "type": "string",
                        "description": "Method to sort results",
                        "enum": [
                            "relevance",
                            "price_asc",
                            "price_desc",
                            "rating",
                            "reviews"
                        ],
                        "default": "relevance"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Additional filters for the search",
                        "properties": {
                            "brand": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            },
                            "condition": {
                                "type": "string",
                                "enum": [
                                    "new",
                                    "used",
                                    "renewed"
                                ]
                            },
                            "shipping_speed": {
                                "type": "string",
                                "enum": [
                                    "same_day",
                                    "one_day",
                                    "two_day"
                                ]
                            }
                        }
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    },
                    "page_size": {
                        "type": "integer",
                        "description": "Number of results per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100
                    }
                },
                "required": [
                    "keyword"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "search_products_temu",
            "description": "Search for products on Temu platform, known for affordable prices and wide variety",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query to find products"
                    },
                    "category_id": {
                        "type": "string",
                        "description": "Category ID for filtering products"
                    },
                    "sort_by": {
                        "type": "string",
                        "description": "Method to sort results",
                        "enum": [
                            "recommended",
                            "price_low",
                            "price_high",
                            "orders",
                            "newest"
                        ],
                        "default": "recommended"
                    },
                    "min_price": {
                        "type": "number",
                        "description": "Minimum price filter"
                    },
                    "max_price": {
                        "type": "number",
                        "description": "Maximum price filter"
                    },
                    "shipping_region": {
                        "type": "string",
                        "description": "Shipping region code (e.g., US, UK)",
                        "default": "US"
                    },
                    "free_shipping": {
                        "type": "boolean",
                        "description": "Show only items with free shipping",
                        "default": false
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "search_products_ebay",
            "description": "Search for products on eBay platform, including both auction and fixed-price items",
            "parameters": {
                "type": "object",
                "properties": {
                    "search_term": {
                        "type": "string",
                        "description": "Search term to find products"
                    },
                    "category": {
                        "type": "string",
                        "description": "Item category"
                    },
                    "condition": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "new",
                                "used",
                                "not_specified"
                            ]
                        },
                        "description": "List of acceptable item conditions"
                    },
                    "min_price": {
                        "type": "number",
                        "description": "Minimum price filter"
                    },
                    "max_price": {
                        "type": "number",
                        "description": "Maximum price filter"
                    },
                    "buy_format": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "auction",
                                "buy_it_now",
                                "best_offer"
                            ]
                        },
                        "description": "List of acceptable buying formats"
                    },
                    "location": {
                        "type": "string",
                        "description": "Item location"
                    },
                    "free_shipping": {
                        "type": "boolean",
                        "description": "Show only items with free shipping",
                        "default": false
                    },
                    "best_offer": {
                        "type": "boolean",
                        "description": "Show only items accepting Best Offer",
                        "default": false
                    },
                    "returns_accepted": {
                        "type": "boolean",
                        "description": "Show only items with returns accepted",
                        "default": false
                    },
                    "page_number": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    }
                },
                "required": [
                    "search_term"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "search_products_taobao",
            "description": "Search for products on Taobao platform, including both Taobao and Tmall items",
            "parameters": {
                "type": "object",
                "properties": {
                    "keyword": {
                        "type": "string",
                        "description": "Search keyword to find products"
                    },
                    "cat": {
                        "type": "string",
                        "description": "Category ID for filtering"
                    },
                    "sort": {
                        "type": "string",
                        "description": "Method to sort results",
                        "enum": [
                            "default",
                            "sales",
                            "price_asc",
                            "price_desc",
                            "credit"
                        ],
                        "default": "default"
                    },
                    "price_range": {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "minItems": 2,
                        "maxItems": 2,
                        "description": "Array of [min_price, max_price] for filtering"
                    },
                    "location": {
                        "type": "string",
                        "description": "Item location (province/city)"
                    },
                    "delivery_time": {
                        "type": "integer",
                        "description": "Maximum delivery time in days",
                        "minimum": 1
                    },
                    "tmall_only": {
                        "type": "boolean",
                        "description": "Show only Tmall items",
                        "default": false
                    },
                    "has_coupon": {
                        "type": "boolean",
                        "description": "Show only items with coupons",
                        "default": false
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    },
                    "page_size": {
                        "type": "integer",
                        "description": "Number of results per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100
                    }
                },
                "required": [
                    "keyword"
                ]
            }
        },
        "category": "eCommerce"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_meituan",
            "description": "Place a food delivery order on Meituan platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_id": {
                        "type": "string",
                        "description": "Special instructions for the restaurant"
                    },
                    "note_to_driver": {
                        "type": "string",
                        "description": "Special instructions for the delivery driver"
                    },
                    "contact_phone": {
                        "type": "string",
                        "description": "Contact phone number"
                    }
                },
                "required": [
                    "restaurant_id",
                    "items",
                    "delivery_address"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_doordash",
            "description": "Place a food delivery order on DoorDash platform with options for priority delivery and tipping",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_id": {
                        "type": "string",
                        "description": "ID of the restaurant"
                    },
                    "items": {
                        "type": "array",
                        "description": "List of items to order",
                        "items": {
                            "type": "object",
                            "properties": {
                                "item_id": {
                                    "type": "string",
                                    "description": "ID of the menu item"
                                },
                                "quantity": {
                                    "type": "integer",
                                    "description": "Quantity of this item"
                                },
                                "customizations": {
                                    "type": "object",
                                    "description": "Customization options for this item"
                                }
                            },
                            "required": [
                                "item_id",
                                "quantity"
                            ]
                        }
                    },
                    "delivery_address": {
                        "type": "string",
                        "description": "Delivery address"
                    },
                    "tip_amount": {
                        "type": "number",
                        "description": "Tip amount for the dasher",
                        "default": 0
                    },
                    "delivery_instructions": {
                        "type": "string",
                        "description": "Special instructions for delivery"
                    },
                    "scheduled_time": {
                        "type": "string",
                        "description": "Schedule delivery for later (YYYY-MM-DD HH:MM)"
                    },
                    "no_contact_delivery": {
                        "type": "boolean",
                        "description": "Whether to enable no-contact delivery",
                        "default": true
                    },
                    "priority_delivery": {
                        "type": "boolean",
                        "description": "Whether to enable priority delivery",
                        "default": false
                    }
                },
                "required": [
                    "restaurant_id",
                    "items",
                    "delivery_address"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_ubereats",
            "description": "Place a food delivery order on Uber Eats with support for group orders and priority delivery",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_id": {
                        "type": "string",
                        "description": "ID of the restaurant"
                    },
                    "items": {
                        "type": "array",
                        "description": "List of items to order",
                        "items": {
                            "type": "object",
                            "properties": {
                                "item_id": {
                                    "type": "string",
                                    "description": "ID of the menu item"
                                },
                                "quantity": {
                                    "type": "integer",
                                    "description": "Quantity of this item"
                                },
                                "special_instructions": {
                                    "type": "string",
                                    "description": "Special instructions for this item"
                                }
                            },
                            "required": [
                                "item_id",
                                "quantity"
                            ]
                        }
                    },
                    "delivery_address": {
                        "type": "string",
                        "description": "Delivery address"
                    },
                    "tip_percent": {
                        "type": "number",
                        "description": "Tip percentage (0-30)",
                        "default": 15.0
                    },
                    "delivery_notes": {
                        "type": "string",
                        "description": "Special instructions for delivery"
                    },
                    "schedule_for": {
                        "type": "string",
                        "description": "Schedule delivery time (YYYY-MM-DD HH:MM)"
                    },
                    "priority": {
                        "type": "boolean",
                        "description": "Whether to enable priority delivery",
                        "default": false
                    },
                    "group_order": {
                        "type": "boolean",
                        "description": "Whether this is a group order",
                        "default": false
                    }
                },
                "required": [
                    "restaurant_id",
                    "items",
                    "delivery_address"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "place_order_foodpanda",
            "description": "Place a food delivery order on Foodpanda with support for vouchers and pro membership benefits",
            "parameters": {
                "type": "object",
                "properties": {
                    "restaurant_id": {
                        "type": "string",
                        "description": "ID of the restaurant"
                    },
                    "items": {
                        "type": "array",
                        "description": "List of items to order",
                        "items": {
                            "type": "object",
                            "properties": {
                                "item_id": {
                                    "type": "string",
                                    "description": "ID of the menu item"
                                },
                                "quantity": {
                                    "type": "integer",
                                    "description": "Quantity of this item"
                                },
                                "add_ons": {
                                    "type": "array",
                                    "description": "List of add-ons for this item"
                                }
                            },
                            "required": [
                                "item_id",
                                "quantity"
                            ]
                        }
                    },
                    "delivery_address": {
                        "type": "string",
                        "description": "Delivery address"
                    },
                    "voucher_code": {
                        "type": "string",
                        "description": "Voucher code for discount"
                    },
                    "remarks": {
                        "type": "string",
                        "description": "Delivery remarks"
                    },
                    "schedule_time": {
                        "type": "string",
                        "description": "Schedule delivery time (YYYY-MM-DD HH:MM)"
                    },
                    "payment_method": {
                        "type": "string",
                        "description": "Payment method (card/cash)",
                        "enum": [
                            "card",
                            "cash"
                        ],
                        "default": "card"
                    },
                    "pro_member": {
                        "type": "boolean",
                        "description": "Whether user is a pro member",
                        "default": false
                    }
                },
                "required": [
                    "restaurant_id",
                    "items",
                    "delivery_address"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "search_merchant_meituan",
            "description": "Search for merchants/stores on Meituan platform (restaurants, grocery stores, pharmacies, etc.)",
            "parameters": {
                "type": "object",
                "properties": {
                    "keyword": {
                        "type": "string",
                        "description": "Search keyword to find merchants"
                    },
                    "location": {
                        "type": "string",
                        "description": "User's current location or delivery address"
                    },
                    "sort_by": {
                        "type": "string",
                        "description": "Method to sort results",
                        "enum": [
                            "comprehensive",
                            "distance",
                            "rating",
                            "sales"
                        ],
                        "default": "comprehensive"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Additional filters for the search",
                        "properties": {
                            "price_range": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                },
                                "description": "Min and max price range"
                            },
                            "cuisine_type": {
                                "type": "string",
                                "description": "Type of cuisine or store category"
                            },
                            "delivery_time": {
                                "type": "integer",
                                "description": "Maximum delivery time in minutes"
                            }
                        }
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    },
                    "page_size": {
                        "type": "integer",
                        "description": "Number of results per page",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100
                    }
                },
                "required": [
                    "keyword",
                    "location"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "search_merchant_doordash",
            "description": "Search for merchants on DoorDash platform (restaurants, convenience stores, retail shops, etc.)",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query to find merchants"
                    },
                    "address": {
                        "type": "string",
                        "description": "Delivery address for searching nearby merchants"
                    },
                    "cuisine_type": {
                        "type": "string",
                        "description": "Type of cuisine or merchant category"
                    },
                    "price_range": {
                        "type": "string",
                        "description": "Price range category",
                        "enum": [
                            "$",
                            "$$",
                            "$$$"
                        ]
                    },
                    "dietary_preferences": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of dietary preferences (e.g., vegetarian, vegan, gluten-free)"
                    },
                    "rating_min": {
                        "type": "number",
                        "description": "Minimum rating score (1-5)",
                        "minimum": 1,
                        "maximum": 5
                    },
                    "delivery_time_max": {
                        "type": "integer",
                        "description": "Maximum delivery time in minutes"
                    },
                    "top_rated_only": {
                        "type": "boolean",
                        "description": "Show only top-rated merchants",
                        "default": false
                    }
                },
                "required": [
                    "query",
                    "address"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "search_merchant_ubereats",
            "description": "Search for merchants on Uber Eats platform (restaurants, grocery stores, packaged goods, etc.)",
            "parameters": {
                "type": "object",
                "properties": {
                    "search_term": {
                        "type": "string",
                        "description": "Search term to find merchants"
                    },
                    "delivery_location": {
                        "type": "string",
                        "description": "Delivery location for the search"
                    },
                    "sort_by": {
                        "type": "string",
                        "description": "Method to sort results",
                        "enum": [
                            "recommended",
                            "rating",
                            "delivery_time",
                            "price"
                        ],
                        "default": "recommended"
                    },
                    "price_level": {
                        "type": "array",
                        "items": {
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 4
                        },
                        "description": "List of price levels (1-4)"
                    },
                    "dietary_restrictions": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of dietary restrictions"
                    },
                    "max_delivery_fee": {
                        "type": "number",
                        "description": "Maximum delivery fee"
                    },
                    "max_delivery_time": {
                        "type": "integer",
                        "description": "Maximum delivery time in minutes"
                    }
                },
                "required": [
                    "search_term",
                    "delivery_location"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "search_merchant_foodpanda",
            "description": "Search for merchants on Foodpanda platform (restaurants, grocery stores, convenience stores, etc.)",
            "parameters": {
                "type": "object",
                "properties": {
                    "search_text": {
                        "type": "string",
                        "description": "Search text to find merchants"
                    },
                    "area": {
                        "type": "string",
                        "description": "Delivery area for the search"
                    },
                    "cuisine": {
                        "type": "string",
                        "description": "Type of cuisine or merchant category"
                    },
                    "min_order_value": {
                        "type": "number",
                        "description": "Minimum order value filter"
                    },
                    "delivery_time": {
                        "type": "string",
                        "description": "Preferred delivery time (format: YYYY-MM-DD HH:MM)"
                    },
                    "vouchers_only": {
                        "type": "boolean",
                        "description": "Show only merchants with active vouchers",
                        "default": false
                    },
                    "free_delivery": {
                        "type": "boolean",
                        "description": "Show only merchants with free delivery",
                        "default": false
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    }
                },
                "required": [
                    "search_text",
                    "area"
                ]
            }
        },
        "category": "LocalServices"
    },
    {
        "type": "function",
        "function": {
            "name": "create_alipay_payment",
            "description": "Creates a new payment request using Alipay",
            "parameters": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Payment amount (up to 2 decimal places)"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency code",
                        "enum": [
                            "CNY",
                            "USD",
                            "JPY",
                            "EUR",
                            "GBP",
                            "HKD",
                            "CAD",
                            "AUD"
                        ],
                        "default": "CNY"
                    },
                    "subject": {
                        "type": "string",
                        "description": "Payment subject/description"
                    },
                    "buyer_id": {
                        "type": "string",
                        "description": "Alipay user ID of the buyer"
                    },
                    "payment_method": {
                        "type": "string",
                        "description": "Payment method to use",
                        "enum": [
                            "BALANCE",
                            "BANK_CARD",
                            "CREDIT_PAY"
                        ],
                        "default": "BALANCE"
                    },
                    "notify_url": {
                        "type": "string",
                        "description": "URL for receiving payment notifications"
                    }
                },
                "required": [
                    "amount",
                    "subject"
                ]
            }
        },
        "category": "Payments",
        "platform": "Alipay"
    },
    {
        "type": "function",
        "function": {
            "name": "query_alipay_payment",
            "description": "Queries the status of an Alipay payment",
            "parameters": {
                "type": "object",
                "properties": {
                    "payment_id": {
                        "type": "string",
                        "description": "The payment ID to query"
                    }
                },
                "required": [
                    "payment_id"
                ]
            }
        },
        "category": "Payments",
        "platform": "Alipay"
    },
    {
        "type": "function",
        "function": {
            "name": "create_apple_pay_payment",
            "description": "Creates a new payment request using Apple Pay",
            "parameters": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Payment amount (up to 2 decimal places)"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency code",
                        "enum": [
                            "USD",
                            "CNY",
                            "JPY",
                            "EUR",
                            "GBP",
                            "HKD",
                            "CAD",
                            "AUD"
                        ],
                        "default": "USD"
                    },
                    "merchant_id": {
                        "type": "string",
                        "description": "Apple Pay merchant identifier"
                    },
                    "payment_data": {
                        "type": "object",
                        "description": "Encrypted payment data from Apple Pay",
                        "properties": {
                            "network": {
                                "type": "string",
                                "description": "Payment network",
                                "enum": [
                                    "VISA",
                                    "MASTERCARD",
                                    "AMEX",
                                    "DISCOVER"
                                ]
                            }
                        }
                    },
                    "line_items": {
                        "type": "array",
                        "description": "List of items being purchased",
                        "items": {
                            "type": "object",
                            "properties": {
                                "label": {
                                    "type": "string",
                                    "description": "Item label"
                                },
                                "amount": {
                                    "type": "number",
                                    "description": "Item amount"
                                }
                            }
                        }
                    }
                },
                "required": [
                    "amount",
                    "merchant_id",
                    "payment_data"
                ]
            }
        },
        "category": "Payments",
        "platform": "Apple Pay"
    },
    {
        "type": "function",
        "function": {
            "name": "query_apple_pay_payment",
            "description": "Queries the status of an Apple Pay payment",
            "parameters": {
                "type": "object",
                "properties": {
                    "payment_id": {
                        "type": "string",
                        "description": "The payment ID to query"
                    }
                },
                "required": [
                    "payment_id"
                ]
            }
        },
        "category": "Payments",
        "platform": "Apple Pay"
    },
    {
        "type": "function",
        "function": {
            "name": "create_paypal_payment",
            "description": "Creates a new payment request using PayPal",
            "parameters": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Payment amount (up to 2 decimal places)"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency code",
                        "enum": [
                            "USD",
                            "EUR",
                            "GBP",
                            "CAD",
                            "AUD"
                        ],
                        "default": "USD"
                    },
                    "description": {
                        "type": "string",
                        "description": "Payment description"
                    },
                    "intent": {
                        "type": "string",
                        "description": "Payment intent",
                        "enum": [
                            "CAPTURE",
                            "AUTHORIZE"
                        ],
                        "default": "CAPTURE"
                    },
                    "payer_email": {
                        "type": "string",
                        "description": "Email of the payer"
                    },
                    "return_url": {
                        "type": "string",
                        "description": "Success return URL"
                    },
                    "cancel_url": {
                        "type": "string",
                        "description": "Cancel return URL"
                    },
                    "items": {
                        "type": "array",
                        "description": "List of items being purchased",
                        "items": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Item name"
                                },
                                "quantity": {
                                    "type": "integer",
                                    "description": "Item quantity"
                                },
                                "unit_amount": {
                                    "type": "number",
                                    "description": "Price per unit"
                                }
                            }
                        }
                    }
                },
                "required": [
                    "amount"
                ]
            }
        },
        "category": "Payments",
        "platform": "PayPal"
    },
    {
        "type": "function",
        "function": {
            "name": "query_paypal_payment",
            "description": "Queries the status of a PayPal payment",
            "parameters": {
                "type": "object",
                "properties": {
                    "payment_id": {
                        "type": "string",
                        "description": "The payment ID to query"
                    }
                },
                "required": [
                    "payment_id"
                ]
            }
        },
        "category": "Payments",
        "platform": "PayPal"
    },
    {
        "type": "function",
        "function": {
            "name": "create_wechat_pay_payment",
            "description": "Creates a new payment request using WeChat Pay",
            "parameters": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Payment amount (up to 2 decimal places)"
                    },
                    "currency": {
                        "type": "string",
                        "description": "Payment currency code",
                        "enum": [
                            "CNY",
                            "USD",
                            "HKD"
                        ],
                        "default": "CNY"
                    },
                    "description": {
                        "type": "string",
                        "description": "Payment description"
                    },
                    "trade_type": {
                        "type": "string",
                        "description": "Payment trade type",
                        "enum": [
                            "NATIVE",
                            "JSAPI",
                            "H5",
                            "APP"
                        ],
                        "default": "NATIVE"
                    },
                    "openid": {
                        "type": "string",
                        "description": "WeChat user OpenID (required for JSAPI)"
                    },
                    "notify_url": {
                        "type": "string",
                        "description": "URL for receiving payment notifications"
                    }
                },
                "required": [
                    "amount",
                    "description"
                ]
            }
        },
        "category": "Payments",
        "platform": "WeChat Pay"
    },
    {
        "type": "function",
        "function": {
            "name": "query_wechat_pay_payment",
            "description": "Queries the status of a WeChat Pay payment",
            "parameters": {
                "type": "object",
                "properties": {
                    "payment_id": {
                        "type": "string",
                        "description": "The payment ID to query"
                    }
                },
                "required": [
                    "payment_id"
                ]
            }
        },
        "category": "Payments",
        "platform": "WeChat Pay"
    },
    {
        "type": "function",
        "function": {
            "name": "stripe_create_payment",
            "description": "Create a Stripe payment session with payment links and QR code for various payment methods.",
            "parameters": {
                "type": "object",
                "properties": {
                    "amount": {
                        "type": "number",
                        "description": "Amount in smallest currency unit (e.g., cents for USD). For example, $10.00 should be passed as 1000."
                    },
                    "currency": {
                        "type": "string",
                        "description": "Three-letter ISO currency code (e.g., USD, EUR, GBP)",
                        "pattern": "^[A-Z]{3}$"
                    },
                    "payment_method_types": {
                        "type": "array",
                        "items": {
                            "type": "string",
                            "enum": [
                                "card",
                                "alipay",
                                "wechat_pay",
                                "klarna",
                                "afterpay_clearpay",
                                "ideal"
                            ]
                        },
                        "description": "List of payment methods to accept. Defaults to ['card'] if not specified."
                    },
                    "success_url": {
                        "type": "string",
                        "description": "URL to redirect after successful payment"
                    },
                    "cancel_url": {
                        "type": "string",
                        "description": "URL to redirect after cancelled payment"
                    },
                    "customer_email": {
                        "type": "string",
                        "description": "Customer's email address"
                    },
                    "description": {
                        "type": "string",
                        "description": "Optional description for the payment"
                    },
                    "metadata": {
                        "type": "object",
                        "description": "Optional key-value pairs for additional payment information"
                    }
                },
                "required": [
                    "amount",
                    "currency"
                ]
            }
        },
        "category": "Payments"
    },
    {
        "type": "function",
        "function": {
            "name": "search_google",
            "description": "Perform a search using Google search engine",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "num_results": {
                        "type": "integer",
                        "description": "Number of results to return (1-50)",
                        "minimum": 1,
                        "maximum": 50,
                        "default": 10
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of search to perform",
                        "enum": [
                            "web",
                            "images",
                            "news",
                            "videos"
                        ],
                        "default": "web"
                    },
                    "language": {
                        "type": "string",
                        "description": "Language code for search results",
                        "default": "en"
                    },
                    "safe_search": {
                        "type": "boolean",
                        "description": "Whether to enable safe search",
                        "default": true
                    },
                    "time_period": {
                        "type": "string",
                        "description": "Time period for results",
                        "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                        ],
                        "default": null
                    },
                    "region": {
                        "type": "string",
                        "description": "Region code for search results",
                        "default": "US"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Search"
    },
    {
        "type": "function",
        "function": {
            "name": "search_bing",
            "description": "Perform a search using Bing search engine",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of results to return (1-50)",
                        "minimum": 1,
                        "maximum": 50,
                        "default": 10
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of search to perform",
                        "enum": [
                            "web",
                            "images",
                            "news",
                            "videos"
                        ],
                        "default": "web"
                    },
                    "market": {
                        "type": "string",
                        "description": "Market code for results (e.g., en-US)",
                        "default": "en-US"
                    },
                    "safe_search": {
                        "type": "string",
                        "description": "Safe search setting",
                        "enum": [
                            "off",
                            "moderate",
                            "strict"
                        ],
                        "default": "moderate"
                    },
                    "freshness": {
                        "type": "string",
                        "description": "Result freshness filter",
                        "enum": [
                            "Day",
                            "Week",
                            "Month"
                        ],
                        "default": null
                    },
                    "response_filter": {
                        "type": "string",
                        "description": "Filter for specific types of results",
                        "enum": [
                            "Computation",
                            "Timeline",
                            "Places"
                        ],
                        "default": null
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Search"
    },
    {
        "type": "function",
        "function": {
            "name": "search_brave",
            "description": "Perform a search using Brave search engine with privacy focus",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "count": {
                        "type": "integer",
                        "description": "Number of results to return (1-50)",
                        "minimum": 1,
                        "maximum": 50,
                        "default": 10
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of search to perform",
                        "enum": [
                            "web",
                            "images",
                            "news",
                            "videos"
                        ],
                        "default": "web"
                    },
                    "country": {
                        "type": "string",
                        "description": "Country code for results",
                        "default": "us"
                    },
                    "search_filter": {
                        "type": "string",
                        "description": "Content filter setting",
                        "enum": [
                            "moderate",
                            "strict"
                        ],
                        "default": null
                    },
                    "ui_language": {
                        "type": "string",
                        "description": "Interface language",
                        "default": "en-US"
                    },
                    "no_tracking": {
                        "type": "boolean",
                        "description": "Whether to disable tracking",
                        "default": true
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Search"
    },
    {
        "type": "function",
        "function": {
            "name": "search_baidu",
            "description": "Perform a search using Baidu search engine",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "rn": {
                        "type": "integer",
                        "description": "Number of results to return (1-50)",
                        "minimum": 1,
                        "maximum": 50,
                        "default": 10
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of search to perform",
                        "enum": [
                            "web",
                            "images",
                            "news",
                            "videos"
                        ],
                        "default": "web"
                    },
                    "region": {
                        "type": "string",
                        "description": "Region code for results",
                        "default": "cn"
                    },
                    "time_range": {
                        "type": "string",
                        "description": "Time range filter",
                        "enum": [
                            "day",
                            "week",
                            "month",
                            "year"
                        ],
                        "default": null
                    },
                    "safe": {
                        "type": "boolean",
                        "description": "Whether to enable safe search",
                        "default": true
                    },
                    "lang_type": {
                        "type": "string",
                        "description": "Language type",
                        "enum": [
                            "zh",
                            "en"
                        ],
                        "default": "zh"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Search"
    },
    {
        "type": "function",
        "function": {
            "name": "post_tweet",
            "description": "Posts a new tweet on Twitter/X platform. Can include text and media content.",
            "parameters": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The text content of the tweet (max 280 characters)"
                    },
                    "media_urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of media URLs to attach (max 4 images or 1 video)",
                        "maxItems": 4
                    },
                    "reply_to_id": {
                        "type": "string",
                        "description": "ID of the tweet being replied to"
                    },
                    "is_sensitive": {
                        "type": "boolean",
                        "description": "Flag to mark content as sensitive",
                        "default": false
                    }
                },
                "required": [
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Twitter/X"
    },
    {
        "type": "function",
        "function": {
            "name": "post_tweet_comment",
            "description": "Posts a comment on an existing tweet on Twitter/X platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "tweet_id": {
                        "type": "string",
                        "description": "ID of the tweet to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 280 characters)"
                    },
                    "media_urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of media URLs to attach (max 4 images or 1 video)",
                        "maxItems": 4
                    }
                },
                "required": [
                    "tweet_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Twitter/X"
    },
    {
        "type": "function",
        "function": {
            "name": "post_instagram",
            "description": "Posts content on Instagram. Must include at least one media item.",
            "parameters": {
                "type": "object",
                "properties": {
                    "media_urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of media URLs to post (max 10 images or 1 video)",
                        "maxItems": 10
                    },
                    "caption": {
                        "type": "string",
                        "description": "Post caption (max 2200 characters)"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location tag for the post"
                    },
                    "user_tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of users to tag in the post"
                    },
                    "is_sensitive": {
                        "type": "boolean",
                        "description": "Flag to mark content as sensitive",
                        "default": false
                    }
                },
                "required": [
                    "media_urls"
                ]
            }
        },
        "category": "Social",
        "platform": "Instagram"
    },
    {
        "type": "function",
        "function": {
            "name": "post_instagram_comment",
            "description": "Posts a comment on an Instagram post",
            "parameters": {
                "type": "object",
                "properties": {
                    "post_id": {
                        "type": "string",
                        "description": "ID of the Instagram post to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 2200 characters)"
                    },
                    "reply_to_comment_id": {
                        "type": "string",
                        "description": "ID of the comment being replied to"
                    }
                },
                "required": [
                    "post_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Instagram"
    },
    {
        "type": "function",
        "function": {
            "name": "post_weibo",
            "description": "Posts content on Weibo platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "content": {
                        "type": "string",
                        "description": "The text content of the post (max 2000 characters)"
                    },
                    "media_urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of media URLs to attach (max 9 images or 1 video)",
                        "maxItems": 9
                    },
                    "topics": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of hashtag topics"
                    },
                    "location": {
                        "type": "string",
                        "description": "Location tag for the post"
                    },
                    "is_sensitive": {
                        "type": "boolean",
                        "description": "Flag to mark content as sensitive",
                        "default": false
                    },
                    "visible_to": {
                        "type": "string",
                        "description": "Visibility setting for the post",
                        "enum": [
                            "public",
                            "private",
                            "friends"
                        ],
                        "default": "public"
                    }
                },
                "required": [
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Weibo"
    },
    {
        "type": "function",
        "function": {
            "name": "post_weibo_comment",
            "description": "Posts a comment on a Weibo post",
            "parameters": {
                "type": "object",
                "properties": {
                    "post_id": {
                        "type": "string",
                        "description": "ID of the Weibo post to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 1000 characters)"
                    },
                    "media_urls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of media URLs to attach (max 9 images)",
                        "maxItems": 9
                    },
                    "reply_to_comment_id": {
                        "type": "string",
                        "description": "ID of the comment being replied to"
                    }
                },
                "required": [
                    "post_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Weibo"
    },
    {
        "type": "function",
        "function": {
            "name": "post_tiktok",
            "description": "Posts a video on TikTok platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_url": {
                        "type": "string",
                        "description": "URL of the video file (must be .mp4 or .mov)"
                    },
                    "caption": {
                        "type": "string",
                        "description": "Video caption (max 150 characters)"
                    },
                    "sound_id": {
                        "type": "string",
                        "description": "ID of background sound to use"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of hashtags for the video"
                    },
                    "allow_comments": {
                        "type": "boolean",
                        "description": "Whether to allow comments on the video",
                        "default": true
                    },
                    "allow_duet": {
                        "type": "boolean",
                        "description": "Whether to allow duets of the video",
                        "default": true
                    },
                    "allow_stitch": {
                        "type": "boolean",
                        "description": "Whether to allow stitching the video",
                        "default": true
                    }
                },
                "required": [
                    "video_url"
                ]
            }
        },
        "category": "Social",
        "platform": "TikTok"
    },
    {
        "type": "function",
        "function": {
            "name": "post_tiktok_comment",
            "description": "Posts a comment on a TikTok video",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "ID of the TikTok video to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 150 characters)"
                    },
                    "reply_to_comment_id": {
                        "type": "string",
                        "description": "ID of the comment being replied to"
                    }
                },
                "required": [
                    "video_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "TikTok"
    },
    {
        "type": "function",
        "function": {
            "name": "post_youtube_video",
            "description": "Uploads a video to YouTube platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_url": {
                        "type": "string",
                        "description": "URL of the video file"
                    },
                    "title": {
                        "type": "string",
                        "description": "Video title (max 100 characters)"
                    },
                    "description": {
                        "type": "string",
                        "description": "Video description (max 5000 characters)"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of video tags (total max 500 characters)"
                    },
                    "category_id": {
                        "type": "string",
                        "description": "Video category ID",
                        "default": "22"
                    },
                    "privacy_status": {
                        "type": "string",
                        "description": "Privacy setting for the video",
                        "enum": [
                            "public",
                            "unlisted",
                            "private"
                        ],
                        "default": "public"
                    },
                    "made_for_kids": {
                        "type": "boolean",
                        "description": "Whether the video is made for kids",
                        "default": false
                    }
                },
                "required": [
                    "video_url",
                    "title"
                ]
            }
        },
        "category": "Social",
        "platform": "YouTube"
    },
    {
        "type": "function",
        "function": {
            "name": "post_youtube_comment",
            "description": "Posts a comment on a YouTube video",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "ID of the YouTube video to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 10000 characters)"
                    },
                    "reply_to_comment_id": {
                        "type": "string",
                        "description": "ID of the comment being replied to"
                    }
                },
                "required": [
                    "video_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "YouTube"
    },
    {
        "type": "function",
        "function": {
            "name": "post_bilibili_video",
            "description": "Uploads a video to Bilibili platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_url": {
                        "type": "string",
                        "description": "URL of the video file"
                    },
                    "title": {
                        "type": "string",
                        "description": "Video title (max 80 characters)"
                    },
                    "partition_id": {
                        "type": "string",
                        "description": "Video partition/category ID"
                    },
                    "description": {
                        "type": "string",
                        "description": "Video description (max 2000 characters)"
                    },
                    "tags": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "List of video tags (max 12 tags)"
                    },
                    "cover_url": {
                        "type": "string",
                        "description": "URL of video cover image"
                    },
                    "copyright_type": {
                        "type": "integer",
                        "description": "Copyright type (1: Original, 2: Repost)",
                        "enum": [
                            1,
                            2
                        ],
                        "default": 1
                    },
                    "thread_id": {
                        "type": "string",
                        "description": "Series/collection ID for the video"
                    }
                },
                "required": [
                    "video_url",
                    "title",
                    "partition_id"
                ]
            }
        },
        "category": "Social",
        "platform": "Bilibili"
    },
    {
        "type": "function",
        "function": {
            "name": "post_bilibili_comment",
            "description": "Posts a comment on a Bilibili video",
            "parameters": {
                "type": "object",
                "properties": {
                    "video_id": {
                        "type": "string",
                        "description": "ID of the Bilibili video to comment on"
                    },
                    "content": {
                        "type": "string",
                        "description": "The text content of the comment (max 1000 characters)"
                    },
                    "reply_to_comment_id": {
                        "type": "string",
                        "description": "ID of the comment being replied to"
                    },
                    "include_danmaku": {
                        "type": "boolean",
                        "description": "Whether to send as danmaku (bullet comment)",
                        "default": false
                    },
                    "danmaku_settings": {
                        "type": "object",
                        "description": "Settings for danmaku (if include_danmaku is true)",
                        "properties": {
                            "position": {
                                "type": "string",
                                "description": "Position type of danmaku",
                                "enum": [
                                    "scroll",
                                    "top",
                                    "bottom"
                                ],
                                "default": "scroll"
                            },
                            "color": {
                                "type": "string",
                                "description": "Color of danmaku text in hex format",
                                "default": "#FFFFFF"
                            },
                            "time": {
                                "type": "number",
                                "description": "Timestamp in video where danmaku appears",
                                "default": 0
                            }
                        }
                    }
                },
                "required": [
                    "video_id",
                    "content"
                ]
            }
        },
        "category": "Social",
        "platform": "Bilibili"
    },
    {
        "type": "function",
        "function": {
            "name": "get_twitter_profile",
            "description": "Get detailed profile information for a Twitter/X user",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "User ID or username to fetch profile for"
                    },
                    "include_pinned_tweet": {
                        "type": "boolean",
                        "description": "Whether to include the user's pinned tweet",
                        "default": false
                    },
                    "include_metrics": {
                        "type": "boolean",
                        "description": "Whether to include user metrics (followers, following, etc.)",
                        "default": true
                    }
                },
                "required": [
                    "user_id"
                ]
            }
        },
        "category": "Social",
        "platform": "Twitter/X"
    },
    {
        "type": "function",
        "function": {
            "name": "search_twitter_content",
            "description": "Search for users or tweets on Twitter/X platform",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of content to search for",
                        "enum": [
                            "users",
                            "tweets",
                            "mixed"
                        ],
                        "default": "mixed"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Optional search filters",
                        "properties": {
                            "language": {
                                "type": "string",
                                "description": "Filter by language (e.g., 'en', 'es')"
                            },
                            "start_time": {
                                "type": "string",
                                "description": "Start time for results (ISO 8601)"
                            },
                            "end_time": {
                                "type": "string",
                                "description": "End time for results (ISO 8601)"
                            }
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 20,
                        "minimum": 1,
                        "maximum": 100
                    },
                    "next_token": {
                        "type": "string",
                        "description": "Token for getting the next page of results"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Social",
        "platform": "Twitter/X"
    },
    {
        "type": "function",
        "function": {
            "name": "get_instagram_profile",
            "description": "Get detailed Instagram user profile information including stories and business metrics if requested",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "Instagram user ID or username"
                    },
                    "include_stories": {
                        "type": "boolean",
                        "description": "Whether to include stories and highlights information",
                        "default": false
                    },
                    "include_business_metrics": {
                        "type": "boolean",
                        "description": "Whether to include business account metrics",
                        "default": false
                    }
                },
                "required": [
                    "user_id"
                ]
            }
        },
        "category": "Social",
        "platform": "Instagram"
    },
    {
        "type": "function",
        "function": {
            "name": "search_instagram_content",
            "description": "Search Instagram for users, hashtags, or places",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of content to search for",
                        "enum": [
                            "top",
                            "users",
                            "tags",
                            "places"
                        ],
                        "default": "top"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Optional search filters",
                        "properties": {
                            "location": {
                                "type": "string",
                                "description": "Filter by location"
                            },
                            "date_range": {
                                "type": "string",
                                "description": "Filter by date range"
                            }
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 20
                    },
                    "next_token": {
                        "type": "string",
                        "description": "Token for pagination"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Social",
        "platform": "Instagram"
    },
    {
        "type": "function",
        "function": {
            "name": "get_tiktok_profile",
            "description": "Get detailed TikTok user profile information including live status and commerce info",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "TikTok user ID or username"
                    },
                    "include_live_status": {
                        "type": "boolean",
                        "description": "Whether to include live streaming status and metrics",
                        "default": false
                    },
                    "include_commerce_info": {
                        "type": "boolean",
                        "description": "Whether to include commerce/shop information",
                        "default": false
                    }
                },
                "required": [
                    "user_id"
                ]
            }
        },
        "category": "Social",
        "platform": "TikTok"
    },
    {
        "type": "function",
        "function": {
            "name": "search_tiktok_content",
            "description": "Search TikTok for users, videos, music, or hashtags",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of content to search for",
                        "enum": [
                            "general",
                            "user",
                            "video",
                            "music",
                            "hashtag"
                        ],
                        "default": "general"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Optional search filters",
                        "properties": {
                            "region": {
                                "type": "string",
                                "description": "Filter by region code"
                            },
                            "duration": {
                                "type": "string",
                                "description": "Filter by video duration"
                            }
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 20
                    },
                    "cursor": {
                        "type": "string",
                        "description": "Cursor for pagination"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Social",
        "platform": "TikTok"
    },
    {
        "type": "function",
        "function": {
            "name": "search_youtube_content",
            "description": "Search YouTube for videos, channels, or playlists",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of content to search for",
                        "enum": [
                            "mixed",
                            "video",
                            "channel",
                            "playlist"
                        ],
                        "default": "mixed"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Optional search filters",
                        "properties": {
                            "region": {
                                "type": "string",
                                "description": "Filter by region code"
                            },
                            "upload_date": {
                                "type": "string",
                                "description": "Filter by upload date"
                            },
                            "duration": {
                                "type": "string",
                                "description": "Filter by video duration"
                            }
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of results to return",
                        "default": 20
                    },
                    "page_token": {
                        "type": "string",
                        "description": "Token for pagination"
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Social",
        "platform": "YouTube"
    },
    {
        "type": "function",
        "function": {
            "name": "get_bilibili_profile",
            "description": "Get detailed Bilibili user profile information including live streaming and bangumi watching status",
            "parameters": {
                "type": "object",
                "properties": {
                    "user_id": {
                        "type": "string",
                        "description": "Bilibili user ID (mid)"
                    },
                    "include_live": {
                        "type": "boolean",
                        "description": "Whether to include live streaming status and information",
                        "default": false
                    },
                    "include_bangumi": {
                        "type": "boolean",
                        "description": "Whether to include anime/bangumi watching status",
                        "default": false
                    }
                },
                "required": [
                    "user_id"
                ]
            }
        },
        "category": "Social",
        "platform": "Bilibili"
    },
    {
        "type": "function",
        "function": {
            "name": "search_bilibili_content",
            "description": "Search Bilibili for videos, users, live streams, articles, or anime",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "Search query string"
                    },
                    "search_type": {
                        "type": "string",
                        "description": "Type of content to search for",
                        "enum": [
                            "all",
                            "video",
                            "user",
                            "live",
                            "article",
                            "bangumi"
                        ],
                        "default": "all"
                    },
                    "filters": {
                        "type": "object",
                        "description": "Optional search filters",
                        "properties": {
                            "order": {
                                "type": "string",
                                "enum": [
                                    "default",
                                    "pubdate",
                                    "view",
                                    "danmaku",
                                    "reply",
                                    "favorite",
                                    "coin",
                                    "share"
                                ],
                                "description": "Sort order for results"
                            },
                            "duration": {
                                "type": "string",
                                "enum": [
                                    "0",
                                    "1",
                                    "2",
                                    "3",
                                    "4"
                                ],
                                "description": "Video duration filter (0: all, 1: <10min, 2: 10-30min, 3: 30-60min, 4: >60min)"
                            },
                            "partition": {
                                "type": "string",
                                "description": "Filter by content partition/category"
                            }
                        }
                    },
                    "limit": {
                        "type": "integer",
                        "description": "Maximum number of results per page",
                        "default": 20
                    },
                    "page": {
                        "type": "integer",
                        "description": "Page number for pagination",
                        "default": 1,
                        "minimum": 1
                    }
                },
                "required": [
                    "query"
                ]
            }
        },
        "category": "Social",
        "platform": "Bilibili"
    },
    {
        "type": "function",
        "function": {
            "name": "execute_command",
            "description": "Execute a shell command with specified parameters. Supports timeout and environment configuration.",
            "parameters": {
                "type": "object",
                "properties": {
                    "command": {
                        "type": "string",
                        "description": "The shell command to execute"
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Maximum execution time in seconds (default: 30)",
                        "optional": true
                    },
                    "working_dir": {
                        "type": "string",
                        "description": "Working directory for command execution",
                        "optional": true
                    },
                    "env_vars": {
                        "type": "object",
                        "description": "Additional environment variables as key-value pairs",
                        "optional": true
                    }
                },
                "required": [
                    "command"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "file_operation",
            "description": "Perform file operations like read, write, copy, move, and delete.",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "read",
                            "write",
                            "copy",
                            "move",
                            "delete"
                        ],
                        "description": "Type of file operation to perform"
                    },
                    "path": {
                        "type": "string",
                        "description": "Path to the file to operate on"
                    },
                    "destination": {
                        "type": "string",
                        "description": "Destination path for copy/move operations",
                        "optional": true
                    },
                    "content": {
                        "type": "string",
                        "description": "Content to write for write operation",
                        "optional": true
                    },
                    "mode": {
                        "type": "string",
                        "description": "File mode for read/write operations (e.g., 'r', 'w', 'a')",
                        "optional": true
                    }
                },
                "required": [
                    "operation",
                    "path"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "system_info",
            "description": "Get detailed system information including CPU, memory, disk, and network status.",
            "parameters": {
                "type": "object",
                "properties": {}
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "process_management",
            "description": "Manage system processes - list, kill, or get information about processes.",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "list",
                            "kill",
                            "info"
                        ],
                        "description": "Type of process operation to perform"
                    },
                    "pid": {
                        "type": "integer",
                        "description": "Process ID for specific operations",
                        "optional": true
                    },
                    "name": {
                        "type": "string",
                        "description": "Process name for filtering or information",
                        "optional": true
                    },
                    "signal": {
                        "type": "integer",
                        "description": "Signal number for kill operation (default: 15 SIGTERM)",
                        "optional": true
                    }
                },
                "required": [
                    "operation"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "git_operation",
            "description": "Perform Git operations like clone, pull, push, commit, status, and log.",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "clone",
                            "pull",
                            "push",
                            "commit",
                            "status",
                            "log"
                        ],
                        "description": "Type of Git operation to perform"
                    },
                    "repository_path": {
                        "type": "string",
                        "description": "Path to the Git repository"
                    },
                    "args": {
                        "type": "object",
                        "description": "Additional arguments for specific operations (e.g., commit message, branch name)",
                        "optional": true,
                        "properties": {
                            "url": {
                                "type": "string",
                                "description": "Repository URL for clone operation"
                            },
                            "message": {
                                "type": "string",
                                "description": "Commit message for commit operation"
                            },
                            "branch": {
                                "type": "string",
                                "description": "Branch name for push operation"
                            }
                        }
                    }
                },
                "required": [
                    "operation",
                    "repository_path"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "docker_operation",
            "description": "Perform Docker operations like run, build, ps, and logs.",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "run",
                            "build",
                            "ps",
                            "logs"
                        ],
                        "description": "Type of Docker operation to perform"
                    },
                    "target": {
                        "type": "string",
                        "description": "Container/image name or ID"
                    },
                    "args": {
                        "type": "object",
                        "description": "Additional arguments for specific operations",
                        "optional": true,
                        "properties": {
                            "dockerfile": {
                                "type": "string",
                                "description": "Path to Dockerfile for build operation"
                            },
                            "ports": {
                                "type": "object",
                                "description": "Port mappings for run operation"
                            },
                            "environment": {
                                "type": "object",
                                "description": "Environment variables for run operation"
                            },
                            "volumes": {
                                "type": "array",
                                "description": "Volume mappings for run operation"
                            },
                            "network": {
                                "type": "string",
                                "description": "Network configuration for run operation"
                            },
                            "tag": {
                                "type": "string",
                                "description": "Image tag for build operation"
                            }
                        }
                    }
                },
                "required": [
                    "operation",
                    "target"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "package_operation",
            "description": "Perform package manager operations (pip, npm, yarn) like install, uninstall, update, and list.",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "install",
                            "uninstall",
                            "list",
                            "search"
                        ],
                        "description": "Type of package operation to perform"
                    },
                    "package_name": {
                        "type": "string",
                        "description": "Name of the package to operate on"
                    },
                    "manager": {
                        "type": "string",
                        "enum": [
                            "pip",
                            "npm",
                            "yarn"
                        ],
                        "description": "Package manager to use",
                        "default": "pip"
                    },
                    "args": {
                        "type": "object",
                        "description": "Additional arguments for specific operations",
                        "optional": true,
                        "properties": {
                            "version": {
                                "type": "string",
                                "description": "Specific version to install"
                            },
                            "global": {
                                "type": "boolean",
                                "description": "Install globally (for npm/yarn)"
                            },
                            "dev": {
                                "type": "boolean",
                                "description": "Install as dev dependency (for npm/yarn)"
                            }
                        }
                    }
                },
                "required": [
                    "operation",
                    "package_name"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "http_request",
            "description": "Make HTTP requests with curl/wget like functionality. Supports various HTTP methods, headers, and data.",
            "parameters": {
                "type": "object",
                "properties": {
                    "url": {
                        "type": "string",
                        "description": "Target URL for the HTTP request"
                    },
                    "method": {
                        "type": "string",
                        "enum": [
                            "GET",
                            "POST",
                            "PUT",
                            "DELETE",
                            "HEAD",
                            "OPTIONS"
                        ],
                        "description": "HTTP method to use",
                        "default": "GET"
                    },
                    "headers": {
                        "type": "object",
                        "description": "HTTP headers to include in the request",
                        "optional": true
                    },
                    "data": {
                        "type": [
                            "string",
                            "object"
                        ],
                        "description": "Data to send in the request body",
                        "optional": true
                    },
                    "timeout": {
                        "type": "integer",
                        "description": "Request timeout in seconds",
                        "default": 30,
                        "optional": true
                    },
                    "follow_redirects": {
                        "type": "boolean",
                        "description": "Whether to follow HTTP redirects",
                        "default": true,
                        "optional": true
                    },
                    "verify_ssl": {
                        "type": "boolean",
                        "description": "Whether to verify SSL certificates",
                        "default": true,
                        "optional": true
                    }
                },
                "required": [
                    "url"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "network_diagnostic",
            "description": "Perform network diagnostics like ping, traceroute, and DNS lookups.",
            "parameters": {
                "type": "object",
                "properties": {
                    "target": {
                        "type": "string",
                        "description": "Target host/IP address"
                    },
                    "operation": {
                        "type": "string",
                        "enum": [
                            "ping",
                            "traceroute",
                            "nslookup"
                        ],
                        "description": "Type of diagnostic operation to perform"
                    },
                    "args": {
                        "type": "object",
                        "description": "Additional arguments for the operation",
                        "optional": true,
                        "properties": {
                            "count": {
                                "type": "integer",
                                "description": "Number of ping requests"
                            },
                            "timeout": {
                                "type": "integer",
                                "description": "Operation timeout in seconds"
                            },
                            "dns_server": {
                                "type": "string",
                                "description": "Specific DNS server to use for nslookup"
                            }
                        }
                    }
                },
                "required": [
                    "target",
                    "operation"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "ssh_operation",
            "description": "Perform SSH operations including connection, command execution, and file transfer (SCP).",
            "parameters": {
                "type": "object",
                "properties": {
                    "operation": {
                        "type": "string",
                        "enum": [
                            "connect",
                            "execute",
                            "scp_upload",
                            "scp_download"
                        ],
                        "description": "Type of SSH operation to perform"
                    },
                    "host": {
                        "type": "string",
                        "description": "Target hostname or IP address"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for SSH authentication"
                    },
                    "args": {
                        "type": "object",
                        "description": "Additional arguments for the operation",
                        "optional": true,
                        "properties": {
                            "password": {
                                "type": "string",
                                "description": "Password for authentication"
                            },
                            "key_file": {
                                "type": "string",
                                "description": "Path to private key file"
                            },
                            "command": {
                                "type": "string",
                                "description": "Command to execute for 'execute' operation"
                            },
                            "local_path": {
                                "type": "string",
                                "description": "Local file path for SCP operations"
                            },
                            "remote_path": {
                                "type": "string",
                                "description": "Remote file path for SCP operations"
                            },
                            "port": {
                                "type": "integer",
                                "description": "SSH port number",
                                "default": 22
                            },
                            "timeout": {
                                "type": "integer",
                                "description": "Connection timeout in seconds"
                            }
                        }
                    }
                },
                "required": [
                    "operation",
                    "host",
                    "username"
                ]
            }
        },
        "category": "System_Tools"
    },
    {
        "type": "function",
        "function": {
            "name": "network_info",
            "description": "Retrieve detailed information about network interfaces, routing, and DNS configuration.",
            "parameters": {
                "type": "object",
                "properties": {}
            }
        },
        "category": "System_Tools"
    }
]